version: 2.1
executors:  
  default:  
    working_directory: ~/repo
    docker:  
      - image: circleci/ruby:2.6.5-nodebrowsers
        environment:  
          BUNDLER_VERSION: 2.1.4
          RAILS_ENV: test
         
      - image: circleci/mysql:5.6 
        environment:
          MYSQL_ROOT_HOST: '%'
          MYSQL_ALLOW_EMPTY_PASSWORD: 'true'

# jobs:
#   build:
#     docker:
#       # specify the version you desire here
#       # ruby2.6.5を使ったアプリのため
#       - image: circleci/ruby:2.6.5-node-browsers
#         environment:
# #  ①注意！！ bundlerのバージョンが2.0.1以上だと、bundle installに失敗します。ここに環境として指定します。
#           - BUNDLER_VERSION: 2.1.4
# #  ②注意！！ circleCIは仮想環境を構築するので、そのときに使うデータベースを指定する必要があります。
#           - RAILS_ENV: 'test'

#       - image: circleci/mysql:5.6
#         environment:
#           - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
#           - MYSQL_ROOT_HOST: '%'

commands:  
  setup:  
    steps:  
      - checkout  
      - run:  
          name: Update bundler # bundlerのバージョン２へのアップデート  
          command: gem update bundler  

      - run:  
          name: Which bundler? # バージョン確認  
          command: bundle -v  

      - restore_cache: # キャッシュを読み込む  
          keys:  
            - gem-cache-v1-{{ checksum "Gemfile.lock" }}  
            - gem-cache-v1-  

      - run:  
          name: Bundle Install  
          command: bundle config set path 'vendor/bundle' || bundle install --deployment

      - save_cache: # キャッシュを保存する  
          key: gem-cache-v1-{{ checksum "Gemfile.lock" }}  
          paths:  
            - vendor/bundle  
      
      # 以下はRails6でWebpackerを使う場合は必須   
      - restore_cache:  
          keys:  
            - yarn-cache-v1-{{ checksum "yarn.lock" }}  
            - yarn-cache-v1-  

      - run:  
          name: Yarn Install  
          command: yarn install --cache-folder ~/.cache/yarn  

      - save_cache:  
          key: yarn-cache-v1-{{ checksum "yarn.lock" }}  
          paths:  
            - ~/.cache/yarn  

    # working_directory: ~/repo
    # steps:
      # - checkout
      # Download and cache dependencies
      # - restore_cache:
          # keys:
            # - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            # - v1-dependencies-

      # - run:
          # name: install dependencies
          # command: |
            # gem install bundler -v 2.1.4
            # bundle install --jobs=4 --retry=3 --path vendor/bundle

      # - save_cache:
          # paths:
            # - ./vendor/bundle
          # key: v1-dependencies-{{ checksum "Gemfile.lock" }}

# ②ちょっと無理やりですが、database.ymlとdatabase.yml.ciを入れ替える記述です。
      # - run: mv config/database.yml.ci config/database.yml 

      # Database setup
      # - run: bundle exec rake db:create
      # - run: bundle exec rake db:schema:load
jobs:  
  test:  
    executor: default  
    environment:  
      RAILS_ENV: test  
    steps:  
      - checkout  
      - setup  
      - run:  
          name: Wait for DB  
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 90s
      
      - run:
          name: Use specific database.yml # CircleCI用のデータベース設定を使う
          command: mv config/database.yml.ci config/database.yml

      - run:
          name: bundle update before database setup
          command: |
            bundle install
            bundle update
      - run:  
          name: Database setup  
          command: |
            bin/rails db:create
            bin/rails db:schema:load --trace  
      # - run: # 普通のテストとシステムテストを実行する  
      #     name: Rails Test  
      #     command: |  
      #       bin/rails test  
      #       bin/rails test:system  
# rubocopを走らせる記述です。
      - run:
          name: Rubocop
          command: bundle exec rubocop -a

# rspecを走らせる記述です。
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"
            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      
      # - add_ssh_keys:
      #     fingerprints:
      #       - "54:3d:77:be:0d:b3:9f:cf:5b:30:7d:08:d0:3b:b3:a1"
      # - deploy:
      #     name: Capistrano deploy
      #     command:
      #       bundle exec cap production deploy

# workflows:
#   version: 2
#   build_accept_deploy:
#     jobs:
#       - build
#       - test:
#           requires:
#             - build
#       - deploy:
#           requires:
#             - test
#           filters:
#             branches:
#               only: master
orbs:
  aws-ecr: circleci/aws-ecr@6.7.0
  aws-ecs: circleci/aws-ecs@1.1.0
workflows:
  # Nginxのデプロイ
  nginx-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: ./nginx/Dockerfile
          repo: nginx
          tag: "${CIRCLE_SHA1}"
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          family: 'Task01' # ECSのタスク定義名
          cluster-name: 'arn:aws:ecs:ap-northeast-1:308853228710:cluster/Cluster01'  #ECSのクラスターのARN
          service-name: 'ecs-rails-service'  #サービス名
          container-image-name-updates: "container=nginx,tag=${CIRCLE_SHA1}"
  # Railsのデプロイ
  rails-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: ./Dockerfile
          repo: app
          tag: "${CIRCLE_SHA1}"
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          family: 'Task01' # ECSのタスク定義名
          cluster-name: 'arn:aws:ecs:ap-northeast-1:308853228710:cluster/Cluster01' #ECSのクラスターのARN
          service-name: 'ecs-rails-service' #サービス名
          container-image-name-updates: "container=app,tag=${CIRCLE_SHA1}"


#AWS_ECR_ACCOUNT_URL => ${アカウントID}.dkr.ecr.${リージョン}.amazonaws.com