version: 2.1
# executors:  
#   default:  
#     working_directory: ~/repo
#     docker:  
#       - image: circleci/ruby:2.6.5-nodebrowsers
#         environment:  
#           BUNDLER_VERSION: 2.1.4
#           RAILS_ENV: test
         
#       - image: circleci/mysql:5.6 
#         environment:
#           MYSQL_ROOT_HOST: '%'
#           MYSQL_ALLOW_EMPTY_PASSWORD: 'true'

# commands:  
#   setup:  
#     steps:  
#       - checkout  
#       - run:  
#           name: Update bundler # bundlerのバージョン２へのアップデート  
#           command: gem update bundler  

#       - run:  
#           name: Which bundler? # バージョン確認  
#           command: bundle -v  

#       - restore_cache: # キャッシュを読み込む  
#           keys:  
#             - gem-cache-v1-{{ checksum "Gemfile.lock" }}  
#             - gem-cache-v1-  

#       - run:  
#           name: Bundle Install  
#           command: bundle config set path 'vendor/bundle' || bundle install --deployment

#       - save_cache: # キャッシュを保存する  
#           key: gem-cache-v1-{{ checksum "Gemfile.lock" }}  
#           paths:  
#             - vendor/bundle  
      
#       # 以下はRails6でWebpackerを使う場合は必須   
#       - restore_cache:  
#           keys:  
#             - yarn-cache-v1-{{ checksum "yarn.lock" }}  
#             - yarn-cache-v1-  

#       - run:  
#           name: Yarn Install  
#           command: yarn install --cache-folder ~/.cache/yarn  

#       - save_cache:  
#           key: yarn-cache-v1-{{ checksum "yarn.lock" }}  
#           paths:  
#             - ~/.cache/yarn  

# jobs:  
#   test:  
#     executor: default  
#     environment:  
#       RAILS_ENV: test  
#     steps:  
#       - checkout  
#       - setup  
#       - run:  
#           name: Wait for DB  
#           command: dockerize -wait tcp://127.0.0.1:3306 -timeout 90s
      
#       - run:
#           name: Use specific database.yml # CircleCI用のデータベース設定を使う
#           command: mv config/database.yml.ci config/database.yml

#       - run:
#           name: bundle update before database setup
#           command: |
#             bundle install
#             bundle update
#       - run:  
#           name: Database setup  
#           command: |
#             bin/rails db:create
#             bin/rails db:schema:load --trace  
#       # - run: # 普通のテストとシステムテストを実行する  
#       #     name: Rails Test  
#       #     command: |  
#       #       bin/rails test  
#       #       bin/rails test:system  
# # rubocopを走らせる記述です。
#       - run:
#           name: Rubocop
#           command: bundle exec rubocop -a

# # rspecを走らせる記述です。
#       - run:
#           name: run tests
#           command: |
#             mkdir /tmp/test-results
#             TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
#               circleci tests split --split-by=timings)"
#             bundle exec rspec \
#               --format progress \
#               --format RspecJunitFormatter \
#               --out /tmp/test-results/rspec.xml \
#               --format progress \
#               $TEST_FILES

#       # collect reports
#       - store_test_results:
#           path: /tmp/test-results
#       - store_artifacts:
#           path: /tmp/test-results
#           destination: test-results
jobs:
  test:
    machine:
      image: circleci/classic:edge
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-Linux-x86_64 > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - setup_remote_docker
      - run:
          name: docker-compose up --build -d
          command: docker-compose up --build -d
      - run: sleep 30
      - run:
          name: docker-compose exec app rubocop
          command: docker-compose exec app rubocop
      # - run:
      #     name: docker-compose exec app rails db:create
      #     command: docker-compose exec app rails db:create
      # - run:
      #     name: docker-compose exec app rails db:migrate
      #     command: docker-compose exec app rails db:migrate
      # - run:
      #     name: docker-compose exec app bash -c "yes n | rails webpacker:install"
      #     command: docker-compose exec app bash -c "yes n | rails webpacker:install"
      # - run:
      #     name: docker-compose exec app rails webpacker:compile RAILS_ENV=test
      #     command: docker-compose exec app rails webpacker:compile RAILS_ENV=test
      - run:
          name: docker-compose exec app rspec
          command: docker-compose exec app rspec
      - run:
          name: docker-compose down
          command: docker-compose down
orbs:
  aws-ecr: circleci/aws-ecr@6.7.0
  aws-ecs: circleci/aws-ecs@1.1.0

workflows:
  build_and_test:  
    jobs:  
      - test
  # Nginxのデプロイ
  nginx-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: ./nginx/Dockerfile
          repo: nginx
          tag: "${CIRCLE_SHA1}"
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          family: 'Task01' # ECSのタスク定義名
          cluster-name: 'arn:aws:ecs:ap-northeast-1:308853228710:cluster/Cluster01'  #ECSのクラスターのARN
          service-name: 'ecs-rails-service'  #サービス名
          container-image-name-updates: "container=nginx,tag=${CIRCLE_SHA1}"
  # Railsのデプロイ
  rails-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: ./Dockerfile
          repo: app
          tag: "${CIRCLE_SHA1}"
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          family: 'Task01' # ECSのタスク定義名
          cluster-name: 'arn:aws:ecs:ap-northeast-1:308853228710:cluster/Cluster01' #ECSのクラスターのARN
          service-name: 'ecs-rails-service' #サービス名
          container-image-name-updates: "container=app,tag=${CIRCLE_SHA1}"


#AWS_ECR_ACCOUNT_URL => ${アカウントID}.dkr.ecr.${リージョン}.amazonaws.com